

[fixfix fusing]
$length<$0> ($filter<$0> p xs)


[unfolded]
$length<$0> Nil


[yielding]
0


[unfolded]
$length<$0> (Cons y ((
fix<336> (filter: list -> list) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> Nil
  | Cons (y: A) (ys: list) -> 
    if p y
    then Cons y (filter ys)
    else filter ys
  end) ys))


[yielding]
Suc ($length<$0> ((
fix<336> (filter: list -> list) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> Nil
  | Cons (y: A) (ys: list) -> 
    if p y
    then Cons y (filter ys)
    else filter ys
  end) ys))


[fixfix yielded]
(
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) xs


[fixfix fusing]
$le ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) xs) ($length<$0> xs)


[unfolded]
$le x 0


[yielding]

match x with
| 0 -> True
| Suc (x': nat) -> False
end


[unfolded]
$le x (Suc ((
fix<337> (len: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> Suc (len ys)
  end) ys))


[yielding]

match x with
| 0 -> True
| Suc (x': nat) -> $le x' ((
  fix<337> (len: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: A) (ys: list) -> Suc (len ys)
    end) ys)
end


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) xs) xs


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) 0 Nil


[yielding]
True


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) (Suc ((
fix<338> (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys)) (Cons y ys)


[yielding]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) ((
fix<338> (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[unfolded]
(
fix<339> (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) x' Nil


[yielding]

match x' with
| 0 -> True
| Suc (x': nat) -> False
end


[discovery prop (before)]

fun (g: nat) -> ((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (y: A) (ys: list) -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> len x' ys
      end
    end) g ys
then c0
else c1)


[leq from]
((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (y: A) (ys: list) -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> len x' ys
      end
    end) g ys
then c0
else c1)


[leq to]
(
match g with
| 0 -> True
| Suc (x': nat) -> 
  match ys with
  | Nil -> 
    match x' with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (b0: A) (b1: list) -> (
    fun (x: nat) -> 
    fun (ys: list) -> 
    if (
      fix (len: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (xs: list) -> 
        match xs with
        | Nil -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> False
          end
        | Cons (y: A) (ys: list) -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> len x' ys
          end
        end) x ys
    then c0
    else c1) x' b1
  end
end =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (y: A) (ys: list) -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> len x' ys
      end
    end) g ys
then c0
else c1)


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) 0 ys


[yielding]

match ys with
| Nil -> True
| Cons (y: A) (ys: list) -> True
end


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) (Suc x') Nil


[yielding]
False


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) (Suc x') (Cons b0 b1)


[yielding]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: A) (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> len x' ys
    end
  end) x' b1


[discovery prop]

fun (g: nat) -> 
match g with
| 0 -> (True =< 
  match ys with
  | Nil -> c0
  | Cons (y: A) (ys: list) -> c0
  end)
| Suc (x': nat) -> 
  assert Nil <- ys in 
  match x' with
  | 0 -> (True =< c1)
  | Suc (x': nat) -> (False =< c1)
  end
end


[discovery prop (before)]

fun (g: nat) -> ((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (y: A) (ys: list) -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> len x' ys
      end
    end) g ys
then c0
else c1)


[discovery prop]

fun (g: nat) -> 
match g with
| 0 -> (True =< 
  match ys with
  | Nil -> c0
  | Cons (y: A) (ys: list) -> c0
  end)
| Suc (x': nat) -> 
  assert Nil <- ys in 
  match x' with
  | 0 -> (True =< c1)
  | Suc (x': nat) -> (False =< c1)
  end
end


[discovery prop (before)]

fun (g: nat) -> ((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (y: A) (ys: list) -> 
      match x with
      | 0 -> True
      | Suc (x': nat) -> len x' ys
      end
    end) g ys
then c0
else c1)


[discovery prop]

fun (g: nat) -> 
match g with
| 0 -> (True =< 
  match ys with
  | Nil -> c0
  | Cons (y: A) (ys: list) -> c0
  end)
| Suc (x': nat) -> 
  assert Nil <- ys in 
  match x' with
  | 0 -> (True =< c1)
  | Suc (x': nat) -> (False =< c1)
  end
end


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) 0 Nil


[yielding]
True


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) (Suc ((
fix<340> (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys)) (Cons y ys)


[yielding]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix<340> (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[unfolded]
(
fix<341> (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) x' Nil


[yielding]

match x' with
| 0 -> True
| Suc (x': nat) -> 
  match x' with
  | 0 -> True
  | Suc (x': nat) -> False
  end
end


[discovery prop (before)]

fun (g: nat) -> ((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> 
      match ys with
      | Nil -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (b0: A) (b1: list) -> len x' b1
      end
    end) g ys
then c0
else c1)


[leq from]
((
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) g ys =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> 
      match ys with
      | Nil -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (b0: A) (b1: list) -> len x' b1
      end
    end) g ys
then c0
else c1)


[leq to]
(
match g with
| 0 -> True
| Suc (x': nat) -> 
  match ys with
  | Nil -> 
    match x' with
    | 0 -> True
    | Suc (x': nat) -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    end
  | Cons (b0: A) (b1: list) -> (
    fun (x: nat) -> 
    fun (ys: list) -> 
    if (
      fix (len: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> 
          match ys with
          | Nil -> 
            match x' with
            | 0 -> True
            | Suc (x': nat) -> False
            end
          | Cons (b0: A) (b1: list) -> len x' b1
          end
        end) x ys
    then c0
    else c1) x' b1
  end
end =< 
if (
  fix (len: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (ys: list) -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> 
      match ys with
      | Nil -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (b0: A) (b1: list) -> len x' b1
      end
    end) g ys
then c0
else c1)


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) 0 ys


[yielding]
True


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) (Suc x') Nil


[yielding]

match x' with
| 0 -> True
| Suc (x': nat) -> False
end


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) (Suc x') (Cons b0 b1)


[yielding]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> False
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) x' b1


[discovery prop]

fun (g: nat) -> 
match g with
| 0 -> (True =< c0)
| Suc (x': nat) -> 
  assert Nil <- ys in 
  match x' with
  | 0 -> (True =< c0)
  | Suc (x': nat) -> 
    match x' with
    | 0 -> (True =< c1)
    | Suc (x': nat) -> (False =< c1)
    end
  end
end


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) (Suc x'[2]) Nil


[yielding]

match x'[2] with
| 0 -> True
| Suc (x': nat) -> 
  match x' with
  | 0 -> True
  | Suc (x': nat) -> False
  end
end


[unfolded]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) (Suc x'[3]) Nil


[yielding]

match x'[3] with
| 0 -> True
| Suc (x': nat) -> 
  match x' with
  | 0 -> True
  | Suc (x': nat) -> False
  end
end


[hopefully true (before)]

match (
fix<340> (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys with
| 0 -> (True =< True)
| Suc (x': nat) -> 
  assert Nil <- ys in 
  match x' with
  | 0 -> (True =< True)
  | Suc (x': nat) -> 
    match x' with
    | 0 -> (True =< (
      fix (len: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> 
          match ys with
          | Nil -> 
            match x' with
            | 0 -> True
            | Suc (x': nat) -> 
              match x' with
              | 0 -> True
              | Suc (x': nat) -> False
              end
            end
          | Cons (b0: A) (b1: list) -> len x' b1
          end
        end) ((
      fix<340> (filter: list -> nat) -> 
        fun (xs: list) -> 
        match xs with
        | Nil -> 0
        | Cons (y: A) (ys: list) -> 
          if p y
          then Suc (filter ys)
          else filter ys
        end) ys) ys)
    | Suc (x': nat) -> (False =< (
      fix (len: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> 
          match ys with
          | Nil -> 
            match x' with
            | 0 -> True
            | Suc (x': nat) -> 
              match x' with
              | 0 -> True
              | Suc (x': nat) -> False
              end
            end
          | Cons (b0: A) (b1: list) -> len x' b1
          end
        end) ((
      fix<340> (filter: list -> nat) -> 
        fun (xs: list) -> 
        match xs with
        | Nil -> 0
        | Cons (y: A) (ys: list) -> 
          if p y
          then Suc (filter ys)
          else filter ys
        end) ys) ys)
    end
  end
end


[hopefully true]
tt


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[fixfix fusing]
(
fix (len: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match x with
  | 0 -> True
  | Suc (x': nat) -> 
    match ys with
    | Nil -> 
      match x' with
      | 0 -> True
      | Suc (x': nat) -> 
        match x' with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      end
    | Cons (b0: A) (b1: list) -> len x' b1
    end
  end) ((
fix (filter: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: A) (ys: list) -> 
    if p y
    then Suc (filter ys)
    else filter ys
  end) ys) ys


[orig]
(
fix (filter: list -> bool) -> 
  fun (ys: list) -> 
  match ys with
  | Nil -> True
  | Cons (y: A) (ys: list) -> 
    if _10 y
    then filter ys
    else 
      if filter ys
      then True
      else (
        fix (len: nat -> list -> bool) -> 
          fun (x: nat) -> 
          fun (ys: list) -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> 
            match ys with
            | Nil -> 
              match x' with
              | 0 -> True
              | Suc (x': nat) -> 
                match x' with
                | 0 -> True
                | Suc (x': nat) -> False
                end
              end
            | Cons (b0: A) (b1: list) -> len x' b1
            end
          end) ((
        fix (filter: list -> nat) -> 
          fun (xs: list) -> 
          match xs with
          | Nil -> 0
          | Cons (y: A) (ys: list) -> 
            if _14 y
            then Suc (filter ys)
            else filter ys
          end) ys) ys
  end) _0


[guess]
True


[guess check]
True


[fixfix yielded]
True


[orig]
(
fix (filter: list -> bool) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> True
  | Cons (y: A) (ys: list) -> 
    if _5 y
    then filter ys
    else True
  end) _0


[guess]
True


[guess check]
True


[fixfix yielded]
True


[fixfix yielded]
True
Cases: 1  Tried: 0  Errors: 0  Failures: 0                                          Cases: 1  Tried: 1  Errors: 0  Failures: 0

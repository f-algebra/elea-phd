144c144,145
< $eq (Suc x') y[2]
---
> 
> assert True <- $eq (Suc x') y[2] in False
149,152c150,192
< match y[2] with
< | 0 -> False
< | Suc (y': nat) -> $eq x' y'
< end
---
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in False
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[2] in (
> fix<338> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in (
> fix<338> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'[2]
168c208,209
< $eq (Suc x') y[2]
---
> 
> assert False <- $eq (Suc x') y[2] in False
175c216,276
< | Suc (y': nat) -> $eq x' y'
---
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in False
> end
> 
> 
> [unfolded]
> 
> assert False <- $eq (Suc x') y[2] in (
> fix<339> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> match y[2] with
> | 0 -> (
>   fix<339> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in (
>   fix<339> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'[2]
362c463,464
< $eq (Suc x') y[2]
---
> 
> assert True <- $eq (Suc x') y[2] in False
367,370c469,511
< match y[2] with
< | 0 -> False
< | Suc (y': nat) -> $eq x' y'
< end
---
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in False
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[2] in (
> fix<342> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in (
> fix<342> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'[2]
386c527,528
< $eq (Suc x') y[2]
---
> 
> assert False <- $eq (Suc x') y[2] in False
393c535,595
< | Suc (y': nat) -> $eq x' y'
---
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in False
> end
> 
> 
> [unfolded]
> 
> assert False <- $eq (Suc x') y[2] in (
> fix<343> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> match y[2] with
> | 0 -> (
>   fix<343> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in (
>   fix<343> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'[2]
661c863
< fix (app: nat -> list -> bool) -> 
---
> fix<345> (app: nat -> list -> bool) -> 
683c885
<       end) x ys[2]
---
>       end) x ys[4]
692,701c894
<   end) ((
< fix<341> (count: list -> nat) -> 
<   fun (xs: list) -> 
<   match xs with
<   | Nil -> 0
<   | Cons (y: nat) (ys: list) -> 
<     if $eq n y
<     then Suc (count ys)
<     else count ys
<   end) ys) (Cons y ys)
---
>   end) x' Nil
704a898,916
> (
> fix (count: nat -> list -> bool) -> 
>   fun (x: nat) -> 
>   fun (ys: list) -> 
>   match ys with
>   | Nil -> 
>     match x with
>     | 0 -> True
>     | Suc (x': nat) -> False
>     end
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then 
>       match x with
>       | 0 -> True
>       | Suc (x': nat) -> count x' ys
>       end
>     else count x ys
>   end) x' ys[4]
706,720c918,926
< if $eq n y
< then 
<   match (
<   fix<341> (count: list -> nat) -> 
<     fun (xs: list) -> 
<     match xs with
<     | Nil -> 0
<     | Cons (y: nat) (ys: list) -> 
<       if $eq n y
<       then Suc (count ys)
<       else count ys
<     end) ys with
<   | 0 -> True
<   | Suc (x': nat) -> (
<     fix (app: nat -> list -> bool) -> 
---
> 
> [unfolded]
> (
> fix<345> (app: nat -> list -> bool) -> 
>   fun (x: nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> (
>     fix (count: nat -> list -> bool) -> 
722,742c928,934
<       fun (xs: list) -> 
<       match xs with
<       | Nil -> (
<         fix (count: nat -> list -> bool) -> 
<           fun (x: nat) -> 
<           fun (ys: list) -> 
<           match ys with
<           | Nil -> 
<             match x with
<             | 0 -> True
<             | Suc (x': nat) -> False
<             end
<           | Cons (y: nat) (ys: list) -> 
<             if $eq n y
<             then 
<               match x with
<               | 0 -> True
<               | Suc (x': nat) -> count x' ys
<               end
<             else count x ys
<           end) x ys[2]
---
>       fun (ys: list) -> 
>       match ys with
>       | Nil -> 
>         match x with
>         | 0 -> True
>         | Suc (x': nat) -> False
>         end
748,766c940
<           | Suc (x': nat) -> app x' ys
<           end
<         else app x ys
<       end) x' ys
<   end
< else (
<   fix (app: nat -> list -> bool) -> 
<     fun (x: nat) -> 
<     fun (xs: list) -> 
<     match xs with
<     | Nil -> (
<       fix (count: nat -> list -> bool) -> 
<         fun (x: nat) -> 
<         fun (ys: list) -> 
<         match ys with
<         | Nil -> 
<           match x with
<           | 0 -> True
<           | Suc (x': nat) -> False
---
>           | Suc (x': nat) -> count x' ys
768,794c942,952
<         | Cons (y: nat) (ys: list) -> 
<           if $eq n y
<           then 
<             match x with
<             | 0 -> True
<             | Suc (x': nat) -> count x' ys
<             end
<           else count x ys
<         end) x ys[2]
<     | Cons (y: nat) (ys: list) -> 
<       if $eq n y
<       then 
<         match x with
<         | 0 -> True
<         | Suc (x': nat) -> app x' ys
<         end
<       else app x ys
<     end) ((
<   fix<341> (count: list -> nat) -> 
<     fun (xs: list) -> 
<     match xs with
<     | Nil -> 0
<     | Cons (y: nat) (ys: list) -> 
<       if $eq n y
<       then Suc (count ys)
<       else count ys
<     end) ys) ys
---
>         else count x ys
>       end) x ys[4]
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then 
>       match x with
>       | 0 -> True
>       | Suc (x': nat) -> app x' ys
>       end
>     else app x ys
>   end) x Nil
797c955
< [orig]
---
> [yielding]
799,802c957,965
< fix (count: list -> bool) -> 
<   fun (xs: list) -> 
<   match xs with
<   | Nil -> True
---
> fix (count: nat -> list -> bool) -> 
>   fun (x: nat) -> 
>   fun (ys: list) -> 
>   match ys with
>   | Nil -> 
>     match x with
>     | 0 -> True
>     | Suc (x': nat) -> False
>     end
804,823c967,974
<     if (
<       fix (eq: nat -> nat -> bool) -> 
<         fun (x: nat) -> 
<         fun (y: nat) -> 
<         match x with
<         | 0 -> 
<           match y with
<           | 0 -> True
<           | Suc (y': nat) -> False
<           end
<         | Suc (x': nat) -> 
<           match y with
<           | 0 -> False
<           | Suc (y': nat) -> eq x' y'
<           end
<         end) _6 y
<     then count ys
<     else count ys
<   end) _1
< 
---
>     if $eq n y
>     then 
>       match x with
>       | 0 -> True
>       | Suc (x': nat) -> count x' ys
>       end
>     else count x ys
>   end) x ys[4]
825,826d975
< [guess]
< True
827a977,978
> [unfolded]
> $eq 0 y[2]
829,830d979
< [guess check]
< True
831a981
> [yielding]
833,834c983,986
< [fixfix yielded]
< True
---
> match y[2] with
> | 0 -> True
> | Suc (y': nat) -> False
> end
837,839c989,1554
< [fixfix yielded]
< True
< Cases: 1  Tried: 0  Errors: 0  Failures: 0                                          Cases: 1  Tried: 1  Errors: 0  Failures: 0
---
> [unfolded]
> 
> assert False <- $eq (Suc x') y[2] in False
> 
> 
> [yielding]
> 
> match y[2] with
> | 0 -> False
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in False
> end
> 
> 
> [unfolded]
> 
> assert False <- $eq (Suc x') y[2] in (
> fix<346> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> match y[2] with
> | 0 -> (
>   fix<346> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in (
>   fix<346> (eq: nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> False
>       | Suc (y': nat) -> eq x' y'
>       end
>     end) x' y'[2]
> end
> 
> 
> [unfolded]
> $eq 0 y[2]
> 
> 
> [yielding]
> 
> match y[2] with
> | 0 -> True
> | Suc (y': nat) -> False
> end
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[2] in False
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in False
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[2] in (
> fix<347> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[2] in 
> assert True <- $eq x' y' in (
> fix<347> (eq: nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> False
>     | Suc (y': nat) -> eq x' y'
>     end
>   end) x' y'[2]
> 
> 
> [fixfix fusing]
> (
> fix (app: nat -> nat -> list -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   fun (ys: list) -> 
>   if $eq n y
>   then 
>     match x with
>     | 0 -> True
>     | Suc (x': nat) -> 
>       match ys with
>       | Nil -> (
>         fix (count: nat -> list -> bool) -> 
>           fun (x: nat) -> 
>           fun (ys: list) -> 
>           match ys with
>           | Nil -> 
>             match x with
>             | 0 -> True
>             | Suc (x': nat) -> False
>             end
>           | Cons (y: nat) (ys: list) -> 
>             if $eq n y
>             then 
>               match x with
>               | 0 -> True
>               | Suc (x': nat) -> count x' ys
>               end
>             else count x ys
>           end) x' ys[3]
>       | Cons (b0: nat) (b1: list) -> app x' b0 b1
>       end
>     end
>   else 
>     match ys with
>     | Nil -> (
>       fix (count: nat -> list -> bool) -> 
>         fun (x: nat) -> 
>         fun (ys: list) -> 
>         match ys with
>         | Nil -> 
>           match x with
>           | 0 -> True
>           | Suc (x': nat) -> False
>           end
>         | Cons (y: nat) (ys: list) -> 
>           if $eq n y
>           then 
>             match x with
>             | 0 -> True
>             | Suc (x': nat) -> count x' ys
>             end
>           else count x ys
>         end) x ys[3]
>     | Cons (b0: nat) (b1: list) -> app x b0 b1
>     end) ((
> fix (count: list -> nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> 0
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then Suc (count ys)
>     else count ys
>   end) ys) y ys
> 
> 
> [unfolded]
> (
> fix (app: nat -> nat -> list -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   fun (ys: list) -> 
>   if $eq n y
>   then 
>     match x with
>     | 0 -> True
>     | Suc (x': nat) -> 
>       match ys with
>       | Nil -> (
>         fix (count: nat -> list -> bool) -> 
>           fun (x: nat) -> 
>           fun (ys: list) -> 
>           match ys with
>           | Nil -> 
>             match x with
>             | 0 -> True
>             | Suc (x': nat) -> False
>             end
>           | Cons (y: nat) (ys: list) -> 
>             if $eq n y
>             then 
>               match x with
>               | 0 -> True
>               | Suc (x': nat) -> count x' ys
>               end
>             else count x ys
>           end) x' ys[4]
>       | Cons (b0: nat) (b1: list) -> app x' b0 b1
>       end
>     end
>   else 
>     match ys with
>     | Nil -> (
>       fix (count: nat -> list -> bool) -> 
>         fun (x: nat) -> 
>         fun (ys: list) -> 
>         match ys with
>         | Nil -> 
>           match x with
>           | 0 -> True
>           | Suc (x': nat) -> False
>           end
>         | Cons (y: nat) (ys: list) -> 
>           if $eq n y
>           then 
>             match x with
>             | 0 -> True
>             | Suc (x': nat) -> count x' ys
>             end
>           else count x ys
>         end) x ys[4]
>     | Cons (b0: nat) (b1: list) -> app x b0 b1
>     end) 0 y Nil
> 
> 
> [yielding]
> 
> if $eq n y
> then True
> else (
>   fix (count: nat -> list -> bool) -> 
>     fun (x: nat) -> 
>     fun (ys: list) -> 
>     match ys with
>     | Nil -> 
>       match x with
>       | 0 -> True
>       | Suc (x': nat) -> False
>       end
>     | Cons (y: nat) (ys: list) -> 
>       if $eq n y
>       then 
>         match x with
>         | 0 -> True
>         | Suc (x': nat) -> count x' ys
>         end
>       else count x ys
>     end) 0 ys[3]
> 
> 
> [unfolded]
> $eq 0 y[3]
> 
> 
> [yielding]
> 
> match y[3] with
> | 0 -> True
> | Suc (y': nat) -> False
> end
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[3] in False
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[3] in 
> assert True <- $eq x' y' in False
> 
> 
> [unfolded]
> 
> assert True <- $eq (Suc x') y[3] in (
> fix<350> (eq: nat -> nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     assert 0 <- y[2] in 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> 
>       assert Suc (y': nat) <- y[2] in False
>     | Suc (y': nat) -> 
>       assert Suc (y': nat) <- y[2] in eq x' y' y'[2]
>     end
>   end) x' y' y'[2]
> 
> 
> [yielding]
> 
> assert Suc (y': nat) <- y[3] in 
> assert True <- $eq x' y' in (
> fix<350> (eq: nat -> nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     assert 0 <- y[2] in 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> 
>       assert Suc (y': nat) <- y[2] in False
>     | Suc (y': nat) -> 
>       assert Suc (y': nat) <- y[2] in eq x' y' y'[2]
>     end
>   end) x' y'[2] y'[3]
> 
> 
> [unfolded]
> $eq 0 y[3]
> 
> 
> [yielding]
> 
> match y[3] with
> | 0 -> True
> | Suc (y': nat) -> False
> end
> 
> 
> [unfolded]
> 
> assert False <- $eq (Suc x') y[3] in False
> 
> 
> [yielding]
> 
> match y[3] with
> | 0 -> False
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in False
> end
> 
> 
> [unfolded]
> 
> assert False <- $eq (Suc x') y[3] in (
> fix<351> (eq: nat -> nat -> nat -> bool) -> 
>   fun (x: nat) -> 
>   fun (y: nat) -> 
>   fun (y: nat) -> 
>   match x with
>   | 0 -> 
>     assert 0 <- y[2] in 
>     match y with
>     | 0 -> True
>     | Suc (y': nat) -> False
>     end
>   | Suc (x': nat) -> 
>     match y with
>     | 0 -> 
>       assert Suc (y': nat) <- y[2] in False
>     | Suc (y': nat) -> 
>       assert Suc (y': nat) <- y[2] in eq x' y' y'[2]
>     end
>   end) x' y' y'[2]
> 
> 
> [yielding]
> 
> match y[3] with
> | 0 -> (
>   fix<351> (eq: nat -> nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       assert 0 <- y[2] in 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> 
>         assert Suc (y': nat) <- y[2] in False
>       | Suc (y': nat) -> 
>         assert Suc (y': nat) <- y[2] in eq x' y' y'[2]
>       end
>     end) x' y' y'[2]
> | Suc (y': nat) -> 
>   assert False <- $eq x' y' in (
>   fix<351> (eq: nat -> nat -> nat -> bool) -> 
>     fun (x: nat) -> 
>     fun (y: nat) -> 
>     fun (y: nat) -> 
>     match x with
>     | 0 -> 
>       assert 0 <- y[2] in 
>       match y with
>       | 0 -> True
>       | Suc (y': nat) -> False
>       end
>     | Suc (x': nat) -> 
>       match y with
>       | 0 -> 
>         assert Suc (y': nat) <- y[2] in False
>       | Suc (y': nat) -> 
>         assert Suc (y': nat) <- y[2] in eq x' y' y'[2]
>       end
>     end) x' y'[2] y'[3]
> end
> 
> 
> [unfolded]
> (
> fix<348> (count: list -> nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> 0
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then Suc (count ys)
>     else count ys
>   end) Nil
> 
> 
> [yielding]
> 0
> 
> 
> [unfolded]
> (
> fix<348> (count: list -> nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> 0
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then Suc (count ys)
>     else count ys
>   end) (Cons b0 b1)
> 
> 
> [yielding]
> 
> if $eq n b0
> then Suc ((
>   fix<348> (count: list -> nat) -> 
>     fun (xs: list) -> 
>     match xs with
>     | Nil -> 0
>     | Cons (y: nat) (ys: list) -> 
>       if $eq n y
>       then Suc (count ys)
>       else count ys
>     end) b1)
> else (
>   fix<348> (count: list -> nat) -> 
>     fun (xs: list) -> 
>     match xs with
>     | Nil -> 0
>     | Cons (y: nat) (ys: list) -> 
>       if $eq n y
>       then Suc (count ys)
>       else count ys
>     end) b1
> 
> 
> [unfolded]
> (
> fix<348> (count: list -> nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> 0
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then Suc (count ys)
>     else count ys
>   end) Nil
> 
> 
> [yielding]
> 0
> 
> 
> [unfolded]
> (
> fix<348> (count: list -> nat) -> 
>   fun (xs: list) -> 
>   match xs with
>   | Nil -> 0
>   | Cons (y: nat) (ys: list) -> 
>     if $eq n y
>     then Suc (count ys)
>     else count ys
>   end) (Cons b0 b1)
> 
> 
> [yielding]
> 
> if $eq n b0
> then Suc ((
>   fix<348> (count: list -> nat) -> 
>     fun (xs: list) -> 
>     match xs with
>     | Nil -> 0
>     | Cons (y: nat) (ys: list) -> 
>       if $eq n y
>       then Suc (count ys)
>       else count ys
>     end) b1)
> else (
>   fix<348> (count: list -> nat) -> 
>     fun (xs: list) -> 
>     match xs with
>     | Nil -> 0
>     | Cons (y: nat) (ys: list) -> 
>       if $eq n y
>       then Suc (count ys)
>       else count ys
>     end) b1

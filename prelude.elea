
ind prop_ty = ff
let tt = _|_ prop_ty

let fst<A, B> = 
  fun (p: (A, B)) -> 
  match p with
  | (x, y) -> x
  end

let snd<A, B> = 
  fun (p: (A, B)) -> 
  match p with
  | (x, y) -> y
  end
  
/* Booleans */ 

ind bool = True | False

let not = 
  fun (p: bool) -> if p then False else True

let or = 
  fun (p q: bool) -> if p then True else q

let and =
  fun (p q: bool) -> if p then q else False
    
let implies =
  fun (p q: bool) -> if p then q else True
  
let iff =
  fun (p q: bool) -> and (implies p q) (implies q p)

  
/* Option */

ind option<A> = None | Some A
  
    
/* Natural numbers */    
    
ind nat = 0 | Suc nat

let 1 = Suc 0
let 2 = Suc 1

let eq = 
  fix (eq: nat -> nat -> bool) (x y:nat) ->
  match x with
  | 0 ->
    match y with
    | Suc y' -> False
    | 0 -> True
    end
  | Suc x' ->
    match y with
    | 0 -> False
    | Suc y' -> eq x' y'
    end
  end
    
let le = 
  fix (le: nat -> nat -> bool) (x y: nat) -> 
  match y with
  | 0 -> 
    match x with
    | 0 -> True
    | Suc x' -> False
    end
  | Suc y' ->
    match x with
    | 0 -> True
    | Suc x' -> le x' y'
    end
  end
  
    
let lt = 
  fix (lt: nat -> nat -> bool) (x y: nat) -> 
  match x with
  | 0 -> 
    match y with
    | 0 -> False
    | Suc y' -> True
    end
  | Suc x' ->
    match y with
    | 0 -> False
    | Suc y' -> lt x' y'
    end
  end
  
let max =
  fix (max: nat -> nat -> nat) (x y: nat) ->
  match x with
  | 0 -> y
  | Suc x' -> 
    match y with 
    | 0 -> x
    | Suc y' -> Suc (max x' y')
    end
  end

let add = 
  fix (add: nat -> nat -> nat) (x y: nat) -> 
  match x with 
  | 0 -> y
  | Suc x' -> Suc (add x' y)
  end
  
let it_add = 
  fix (it_add: nat -> nat -> nat) (x y: nat) ->
  match x with
  | 0 -> y
  | Suc x' -> it_add x' (Suc y)
  end
   
let mul = 
  fix (mul: nat -> nat -> nat) (x y: nat) -> 
  match x with
  | 0 -> 0
  | Suc x' -> add y (mul x' y)
  end

let minus = 
  fix (minus: nat -> nat -> nat) (x y: nat) -> 
  match y with
  | 0 -> x
  | Suc y' ->
    match x with
    | 0 -> 0
    | Suc x' -> minus x' y'
    end
  end
  
let triangle = 
  fix (tri: nat -> nat) (x: nat) ->
  match x with
  | 0 -> 0
  | Suc x' -> add x (tri x')
  end
  
let cubes =
  fix (cubes: nat -> nat) (x: nat) ->
  match x with
  | 0 -> 0
  | Suc x' -> add (mul x (mul x x)) (cubes x')
  end
  
   
let double = 
  fix (dbl: nat -> nat) (x: nat) ->
  match x with
  | 0 -> 0
  | Suc x' -> Suc (Suc (dbl x'))
  end
  

  
/* Lists */

ind list<A> = Nil | Cons A list

let length<A> = 
  fix (len: list<A> -> nat) (xs: list<A>) ->
  match xs with
  | Nil -> 0
  | Cons y ys -> Suc (len ys)
  end
 
let append<A> =
  fix (app: list<A> -> list<A> -> list<A>) (xs zs: list<A>) ->
  match xs with
  | Nil -> zs
  | Cons y ys -> Cons<A> y (app ys zs)
  end
  
let reverse<A> = 
  fix (rev: list<A> -> list<A>) (xs: list<A>) ->
  match xs with
  | Nil -> Nil<A>
  | Cons y ys -> append<A> (rev ys) (Cons<A> y Nil<A>)
  end
  
let it_rev<A> =
  fix (it_rev: list<A> -> list<A> -> list<A>) (xs ys: list<A>) ->
  match xs with
  | Nil -> ys
  | Cons x xs' -> it_rev xs' (Cons<A> x ys)
  end
    
let count_nat = 
  fix (c: nat -> list<nat> -> nat) (n: nat) (xs: list<nat>) ->
  match xs with
  | Nil -> 0
  | Cons y ys ->
    if eq n y 
    then Suc (c n ys)
    else c n ys
  end

let take<A> =
  fix (take: nat -> list<A> -> list<A>) (n: nat) (xs: list<A>) ->
  match n with
  | 0 -> Nil<A>
  | Suc n' ->
    match xs with
    | Nil -> Nil<A>
    | Cons y ys -> Cons<A> y (take n' ys)
    end
  end
  
let drop<A> = 
  fix (drop: nat -> list<A> -> list<A>) (n: nat) (xs: list<A>) ->
  match n with
  | 0 -> xs
  | Suc n' ->
    match xs with
    | Nil -> Nil<A>
    | Cons y ys -> drop n' ys
    end
  end

let filter<A> = 
  fun (p: A -> bool) ->
  fix (filter: list<A> -> list<A>) (xs: list<A>) ->
  match xs with
  | Nil -> Nil<A>
  | Cons y ys -> 
    if p y
    then Cons<A> y (filter ys)
    else filter ys
  end
  
let map<A, B> =
  fun (f: A -> B) ->
  fix (map: list<A> -> list<B>) (xs: list<A>) ->
  match xs with
  | Nil -> Nil<B>
  | Cons y ys -> Cons<B> (f y) (map ys)
  end
  
let zip<A, B> =
  fix (zip: list<A> -> list<B> -> list<(A, B)>) (xs: list<A>) (ys: list<B>) ->
  match xs with 
  | Nil -> Nil<(A, B)>
  | Cons x xs ->
    match ys with
    | Nil -> Nil<(A, B)>
    | Cons y ys -> Cons<(A, B)> (x, y) (zip xs ys)
    end
  end

let any<A> = 
  fun (f: A -> bool) ->
  fix (any: list<A> -> bool) (xs: list<A>) ->
  match xs with
  | Nil -> False
  | Cons y ys -> or (f y) (any ys)
  end

let elem_nat = 
  fun (x: nat) -> any<nat> (eq x)
  
    
let insert = 
  fix (ins: nat -> list<nat> -> list<nat>) (n: nat) (xs: list<nat>) ->
  match xs with
  | Nil -> Cons<nat> n Nil<nat>
  | Cons y ys -> 
    if le n y
    then Cons<nat> n xs
    else Cons<nat> y (ins n ys)
  end
    
let insertsort = 
  fix (isort: list<nat> -> list<nat>) (xs: list<nat>) ->
  match xs with
  | Nil -> Nil<nat>
  | Cons y ys -> insert y (isort ys)
  end
  
let is_sorted = 
  fix (srtd: list<nat> -> bool) (xs: list<nat>) ->
  match xs with
  | Nil -> True
  | Cons y ys ->
    match ys with
    | Nil -> True
    | Cons z zs -> 
      and (le y z) (srtd ys)
    end
  end
  
let last<A> = 
  fix (last: list<A> -> A) (xs: list<A>) ->
  match xs with
  | Nil -> _|_ A
  | Cons y ys ->
    match ys with
    | Nil -> y
    | Cons z zs -> last ys
    end
  end
    

/* Binary trees */

ind tree<A> = Leaf | Node tree A tree

let flatten<A> = 
  fix (flat: tree<A> -> list<A>) (t: tree<A>) ->
  match t with
  | Leaf -> Nil<A>
  | Node t1 x t2 -> append<A> (flat t1) (Cons<A> x (flat t2))
  end
  
let height<A> = 
  fix (height: tree<A> -> nat) (t: tree<A>) ->
  match t with
  | Leaf -> 0
  | Node t1 x t2 -> Suc (max (height t1) (height t2))
  end
    
let mirror<A> = 
  fix (mir: tree<A> -> tree<A>) (t: tree<A>) ->
  match t with
  | Leaf -> Leaf<A>
  | Node t1 x t2 -> Node<A> (mir t2) x (mir t1)
  end  
    
let tree_insert = 
  fix (ins: nat -> tree<nat> -> tree<nat>) (n: nat) (t: tree<nat>) ->
  match t with
  | Leaf -> Node<nat> Leaf<nat> n Leaf<nat>
  | Node t1 x t2 ->
    if le n x 
    then Node<nat> (ins n t1) x t2
    else Node<nat> t1 x (ins n t2)
  end
  
let build = 
  fix (build: list<nat> -> tree<nat>) (xs: list<nat>) ->
  match xs with
  | Nil -> Leaf<nat>
  | Cons y ys -> tree_insert y (build ys)
  end
  
let treesort = fun (xs: list<nat>) -> flatten<nat> (build xs)

let rightmost<A> = 
  fix (rm: tree<A> -> A) (t: tree<A>) ->
  match t with
  | Leaf -> _|_ A
  | Node t1 x t2 ->
    match t2 with
    | Leaf -> x
    | Node t1' y t2' ->
      rm t2
    end
  end
  
let leftmost<A> = 
  fix (lm: tree<A> -> option<A>) (t: tree<A>) ->
  match t with
  | Leaf -> None<A>
  | Node t1 x t2 ->
    match t1 with
    | Leaf -> Some<A> x
    | Node t1' y t2' -> lm t1
    end
  end

let rightmost_leq = 
  fun (t: tree<nat>) (n: nat) ->
  (fix (rleq: tree<nat> -> bool) (t: tree<nat>) ->
  match t with
  | Leaf -> True
  | Node t1 x t2 ->
    match t2 with
    | Leaf -> le x n
    | Node t1' x' t2' -> rleq t2
    end
  end) t
  
let leq_leftmost =
  fun (n: nat) (t: tree<nat>) ->
  match flatten<nat> t with
  | Nil -> True
  | Cons x xs -> le n x
  end
  
  /*
let leq_leftmost =
  fix (lm: nat -> tree<nat> -> bool) (n: nat) (t: tree<nat>) ->
  match t with
  | Leaf -> True 
  | Node t1 x t2 ->
    match t1 with
    | Leaf -> le n x
    | Node t1' y t2' -> lm n t1
    end
  end
*/

let sorted_tree = 
  fix (srtd: tree<nat> -> bool) (t: tree<nat>) ->
  match t with
  | Leaf -> True
  | Node t1 x t2 ->
    and (leq_leftmost x t2) 
      (and (srtd t1)
        (and (rightmost_leq t1 x) (srtd t2)))
  end
  
let sorted_tree2 = 
  fix (srtd: tree<nat> -> bool) (t: tree<nat>) ->
  match t with
  | Leaf -> True
  | Node t1 x t2 ->
    and (srtd t1)
      (and (leq_leftmost x t2) 
        (and (rightmost_leq t1 x) (srtd t2)))
  end

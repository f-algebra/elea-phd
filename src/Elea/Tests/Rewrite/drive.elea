
prop "beta1" (x: nat) ->
  (fun (y: nat) -> add x y) x
  ==
  add x x
  
prop "undef case" (x: nat) ->
  match x with 
  | 0 -> tt
  | Suc x' -> tt
  end

prop "beta2" -> 
  (fun (x: nat) (y: nat) -> True)
  ==
  (fun (f: nat -> bool) (x: nat) -> f) (fun (y: nat) -> True)
  
prop "unr1" ->
  (fun (x: nat) -> assert 0 <- x in True)
  =<
  (fun (x: nat) ->
    match x with
    | 0 -> True
    | Suc x' -> 
      if _|_ (nat -> bool) x' 
      then False
      else False
    end)
    
prop "1+1=2" ->
  add 1 1 == 2

prop "2*2=2+2" ->
  mul 2 2 == add 2 2

prop "1<=2" ->
  True == le 1 2
  
prop "not-not" (p: bool) ->
  not (not p) == p
  
prop "case-app" (x: nat) ->
  Suc (match x with | 0 -> 0 | Suc x -> x end)
  >=
  (match x with | 0 -> Suc 0 | Suc x -> Suc x end)
  
prop "eq1" (x: nat) ->
  if (eq x 0)
  then 
    match x with
    | 0 -> tt
    | Suc x' -> ff
    end
  else
    match x with
    | 0 -> ff
    | Suc x' -> tt
    end

let always_true = 
  fix (true: nat -> nat -> bool) (x y: nat) ->
    match x with
    | 0 -> True
    | Suc x' ->
      match y with
      | 0 -> True
      | Suc y' -> true x' y'
      end
    end

prop "always true" (n m: nat) -> 
  always_true n m =< True 
 
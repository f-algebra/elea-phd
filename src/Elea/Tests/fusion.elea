// Requires prelude.elea to be loaded

// Simple Nat properties 
prop zeno1 <A> (n: nat) (xs: list<A>) -> 
  append<A> (take<A> n xs) (drop<A> n xs) =< xs

prop zeno2 (n: nat) (xs ys: list<nat>) -> 
  add (count n xs) (count n ys) == count n (append<nat> xs ys)

// Fails
// prop zeno3 (n: nat) (xs ys: list<nat>) -> 
//   le (count n xs) (count n (append<nat> xs ys))
  
prop zeno4 (n: nat) (xs: list<nat>) ->
  count n (Cons<nat> n xs) =< Suc (count n xs) 
  
prop zeno5 (n m: nat) (xs: list<nat>) ->
  assertBool eq n m
  in Suc (count n xs) == count n (Cons<nat> m xs)
  
prop zeno6 (n m: nat) -> 
  minus n (add n m) =< 0
  
prop zeno7 (n m: nat) -> 
  minus (add n m) n =< m
  
prop zeno8 (k m n: nat) -> 
  minus (add k m) (add k n) =< minus m n
  
prop zeno9 (k m n: nat) -> 
  minus (minus n m) k == minus n (add m k)
  
prop zeno10 (n: nat) ->
  minus n n =< 0
  
prop zeno11 <A> (xs: list<A>) ->
  drop<A> 0 xs == xs
  
prop zeno12 <A, B> (n: nat) (f: A -> B) (xs: list<A>) -> 
  drop<B> n (map<A, B> f xs) 
  == map<A, B> f (drop<A> n xs)
  
prop zeno13 <A> (n: nat) (x: A) (xs: list<A>) ->
  drop<A> (Suc n) (Cons<A> x xs) == drop<A> n xs
  
prop zeno14 <A> (p: A -> bool) (xs ys: list<A>) ->
  filter<A> p (append<A> xs ys) 
  == append<A> (filter<A> p xs) (filter<A> p ys)  

prop zeno15 (n: nat) (xs: list<nat>) ->
  length<nat> (insert n xs) =< Suc (length<nat> xs)

prop zeno16 <A> (x: A) (xs: list<A>) ->
  assertBool null<A> xs
  in last<A> (Cons<A> x xs) == x
  
prop zeno17 (n: nat) ->
  assertBool le n 0
  in n == 0
  
prop zeno18 (n m: nat) ->
  lt n (Suc (add n m))
  
prop zeno19 <A> (n: nat) (xs: list<A>) ->
  length<A> (drop<A> n xs) == minus (length<A> xs) n
  
prop zeno20 (xs: list<nat>) -> 
  length<nat> (insertsort xs) =< length<nat> xs

prop zeno21 (n m: nat) ->
  le n (add n m)
  
prop zeno22 (n m k: nat) ->
  max (max n m) k == max n (max m k)
  
// Does not hold in either directon 
// prop zeno23 (n m: nat) ->
//   max n m == max m n 

prop zeno24 (n m: nat) ->
  assertBool eq (max n m) n
  in le m n
  
prop zeno25 (n m: nat) ->
  assertBool eq (max n m) m
  in le n m
  
prop zeno26 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n xs 
  in elem n (append<nat> xs ys)

prop zeno27 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n ys 
  in elem n (append<nat> xs ys)
  
prop zeno28 (n: nat) (xs: list<nat>) ->  
  elem n (append<nat> xs (Cons<nat> n Nil<nat>))

prop zeno29 (n: nat) (xs: list<nat>) ->  
  elem n (eq_insert n xs)
  
prop zeno30 (n: nat) (xs: list<nat>) ->  
  elem n (lt_insert n xs)

prop zeno31 (n m k: nat) ->
  min (min n m) k == min n (min m k)
  
// Does not hold in either directon
// prop zeno32 (n m: nat) ->
//   min n m == min m n 

prop zeno33 (n m: nat) ->
  assertBool eq (min n m) n
  in le n m
  
prop zeno34 (n m: nat) ->
  assertBool eq (min n m) m
  in le m n
  
prop zeno35 <A> (xs: list<A>) ->
  dropWhile<A> (fun (x: A) -> False) xs == xs
  
prop zeno36 <A> (xs: list<A>) ->
  takeWhile<A> (fun (x: A) -> True) xs == xs
    
prop zeno37 (n: nat) (xs: list<nat>) ->
  not (elem n (delete n xs))
  
prop zeno38 (n: nat) (xs: list<nat>) ->
  count n (append<nat> xs (Cons<nat> n Nil<nat>)) 
  =< Suc (count n xs)
  
prop zeno39 (n x: nat) (xs: list<nat>) ->
  add (count n (Cons<nat> x Nil<nat>)) (count n xs)
  == count n (Cons<nat> x xs)
  
prop zeno40 <A> (xs: list<A>) ->
  take<A> 0 xs == Nil<A>
  
prop zeno41 <A, B> (n: nat) (f: A -> B) (xs: list<A>) ->
  take<B> n (map<A, B> f xs) 
  == map<A, B> f (take<A> n xs)
  
prop zeno42 <A> (n: nat) (x: A) (xs: list<A>) ->
  take<A> (Suc n) (Cons<A> x xs) 
  == Cons<A> x (take<A> n xs)
  
prop zeno43 <A> (p: A -> bool) (xs: list<A>) ->
  append<A> (takeWhile<A> p xs) (dropWhile<A> p xs) =< xs
  
prop zeno44 <A, B> (x: A) (xs: list<A>) (ys: list<B>) ->
  zip<A, B> (Cons<A> x xs) ys =< zipConcat<A, B> x xs ys

prop zeno45 <A, B> (x: A) (y: B) (xs: list<A>) (ys: list<B>) ->
  zip<A, B> (Cons<A> x xs) (Cons<B> y ys)
  == Cons<(A, B)> (x, y) (zip<A, B> xs ys)
  
prop zeno46 <A, B> (xs: list<B>) ->
  zip<A, B> Nil<A> xs == Nil<(A, B)>
  
// Does not hold in either directon
// prop zeno47 <A> (t: tree<A>) ->
//   height<A> (mirror<A> t) == height<A> t

prop zeno48 <A> (xs: list<A>) ->
  assertBool not (null<A> xs) 
  in append<A> (butlast<A> xs) (Cons<A> (last<A> xs) Nil<A>) 
     == xs

// Does not hold in either directon
// prop zeno49 <A> (xs ys: list<A>) ->
//  butlast<A> (append<A> xs ys) 
//  == butlastConcat<A> xs ys

prop zeno50 <A> (xs: list<A>) ->
  butlast<A> xs == take<A> (minus (length<A> xs) 1) xs
     
prop zeno51 <A> (xs: list<A>) (x: A) ->
  butlast<A> (append<A> xs (Cons<A> x Nil<A>)) =< xs
  
// Does not hold in either directon
// prop zeno52 (n: nat) (xs: list<nat>) ->
//  count n xs == count n (rev<nat> xs)
  
// Does not hold in either directon
// prop zeno53 (xs: list<nat>) (n: nat) ->
//  count n (insertsort xs) == count n xs

// Unfold fail
// prop zeno54 (m n: nat) ->
//  minus (add m n) n =< m
/*
prop zeno55 <A> (n: nat) (xs ys: list<A>) ->
  append<A> (drop<A> n xs) (drop<A> (minus n (length<A> xs)) ys)
  == drop<A> n (append<A> xs ys)
          
// Had to rev 'm' and 'n' to make this hold
prop zeno56 <A> (n m: nat) (xs: list<A>) ->
  drop<A> n (drop<A> m xs) == drop<A> (add m n) xs  
  
// Does not hold
// prop zeno57 <A> (n m: nat) (xs: list<A>) ->
//   drop<A> n (take<A> m xs) == take<A> (minus m n) (drop<A> n xs)

// Fail. Would work if I could float pattern matches out of fixed-points
// but this is unsound in non-total languages :sadface:
// prop zeno58 <A, B> (n: nat) (xs: list<A>) (ys: list<B>) ->
//   drop<(A, B)> n (zip<A, B> xs ys) 
//   =< zip<A, B> (drop<A> n xs) (drop<B> n ys)

prop zeno59 <A> (xs ys: list<A>) ->
  assertBool null<A> ys
  in last<A> (append<A> xs ys) == last<A> xs
  
prop zeno60 <A> (xs ys: list<A>) ->
  assertBool not (null<A> ys) 
  in last<A> (append<A> xs ys) == last<A> ys
  
// Does not hold in either direction
// prop zeno61 <A> (xs ys: list<A>) ->
//   last<A> (append<A> xs ys) == lastOfTwo<A> xs ys

prop zeno62 <A> (x: A) (xs: list<A>) ->
  assertBool not (null<A> xs)
  in last<A> (Cons<A> x xs) == last<A> xs
  
prop zeno63 <A> (xs: list<A>) (n: nat) ->
  assertBool lt n (length<A> xs)
  in last<A> (drop<A> n xs) =< last<A> xs

prop zeno64 <A> (x: A) (xs: list<A>) ->
  last<A> (append<A> xs (Cons<A> x Nil<A>)) =< x
  
prop zeno65 (n m: nat) ->
  lt n (Suc (add m n))
      
prop zeno66 <A> (p: A -> bool) (xs: list<A>) ->
  le (length<A> (filter<A> p xs)) (length<A> xs)
  
prop zeno67 <A> (xs: list<A>) ->
  length<A> (butlast<A> xs) =< minus (length<A> xs) 1

prop zeno68 (n: nat) (xs: list<nat>) ->
  le (length<nat> (delete n xs)) (length<nat> xs)

prop zeno69 (n m: nat) ->
  le n (add m n)
  
prop zeno70 (n m: nat) ->
  assertBool le m n 
  in le m (Suc n)

prop zeno71 (n m: nat) (xs: list<nat>) ->
  assertBool not (eq n m) 
  in elem n (insert m xs) =< elem n xs
  
// Fails
// prop zeno72 <A> (n: nat) (xs: list<A>) ->
//   rev<A> (drop<A> n xs)
//   == take<A> (minus (length<A> xs) n) (rev<A> xs)
  
// Does not hold
// prop zeno73 <A> (p: A -> bool) (xs: list<A>) ->
//   rev<A> (filter<A> p xs)
//   == filter<A> p (rev<A> xs)

// Fails
// prop zeno74 <A> (n: nat) (xs: list<A>) ->
//   rev<A> (take<A> n xs)
//   == drop<A> (minus (length<A> xs) n) (rev<A> xs)

// Does not hold in either direction
// prop zeno75 (n m: nat) (xs: list<nat>) ->
//   add (count n xs) (count n (Cons<nat> m Nil<nat>))
//   == count n (Cons<nat> m xs)

prop zeno76 (n m: nat) (xs: list<nat>) ->
  assertBool not (eq n m) 
  in count n (snoc<nat> m xs) =< count n xs
  
// Takes a long time, test separately
// prop zeno77 (n: nat) (xs: list<nat>) ->
//   assertBool is_sorted xs
//   in is_sorted (insert n xs)
  
// Somehow this takes less time than zeno77
prop zeno78 (xs: list<nat>) ->
  is_sorted (insertsort xs)
  
// Does not hold    
// prop zeno79 (m n k: nat) ->
//   minus (minus m n) k == minus (minus (Suc m) n) (Suc k)  

prop zeno80 <A> (n: nat) (xs ys: list<A>) ->
  append<A> (take<A> n xs) (take<A> (minus n (length<A> xs)) ys) 
  == take<A> n (append<A> xs ys) 
 
// Unfold fail
// prop zeno81 <A> (n m: nat) (xs: list<A>) ->
//   drop<A> m (take<A> (add n m) xs)
//   == take<A> n (drop<A> m xs) 
 
prop zeno82 <A, B> (n: nat) (xs: list<A>) (ys: list<A>) ->
  take<(A, B)> n (zip<A, B> xs ys)
  == zip<A, B> (take<A> n xs) (take<A> n ys)
  
prop zeno83 <A, B> (xs ys: list<A>) (zs: list<B>) ->
  append<(A, B)> (zip<A, B> xs (take<A> (length<A> xs) zs))
                 (zip<A, B> ys (drop<A> (length<A> xs) zs))
  == zip<A, B> (append<A> xs ys) zs                 
  
prop zeno84 <A, B> (xs: list<A>) (ys zs: list<B>) ->
  append<(A, B)> (zip<A, B> (take<A> (length<A> ys) xs) ys)
                 (zip<A, B> (drop<A> (length<A> ys) xs) zs)
  == zip<A, B> xs (append<A> ys zs)         
 
// Fails
// prop zeno85 <A, B> (xs: list<A>) (ys: list<B>) ->
//   assertBool eq (length<A> xs) (length<B> ys)
//   in rev<(A, B)> (zip<A, B> xs ys)
//      == zip<A, B> (rev<A> xs) (rev<B> ys) 
     
prop prod1 (n: nat) ->
  add n n =< double n
  
// Does not hold in either direction
// prop prod2 <A> (xs ys: list<A>) ->
//   length<A> (append<A> xs ys) 
//   == length<A> (append<A> ys xs)

// Does not hold in either direction
// prop prod3 <A> (xs ys: list<A>) ->
//   length<A> (append<A> xs ys) 
//   == add (length<A> ys) (length<A> xs)

prop prop4 <A> (xs: list<A>) ->
  length<A> (append<A> xs xs) =< double (length<A> xs)
  
prop prod5 <A> (xs ys: list<A>) ->
  length<A> (rev<A> xs) =< length<A> xs
  
prop prod6 <A> (xs ys: list<A>) ->
  length<A> (rev<A> (append<A> xs ys))
  =< add (length<A> xs) (length<A> ys)
  
prop prod7 <A> (xs ys: list<A>) ->
  length<A> (it_rev<A> xs ys)
  =< add (length<A> xs) (length<A> ys)
  
// Does not hold in either direction
// prop prod8 <A> (n m: nat) (xs: list<A>) ->
//   drop<A> n (drop<A> m xs) 
//   == drop<A> m (drop<A> n xs)

// Does not hold in either direction
// prop prod9 <A> (n m k: nat) (xs: list<A>) ->
//   drop<A> n (drop<A> m (drop<A> k xs)) 
//   == drop<A> k (drop<A> m (drop<A> m xs)) 

prop prod10 <A> (xs: list<A>) ->
  rev<A> (rev<A> xs) =< xs
  
// Fails due to lack of deepseq info
// prop prod11 <A> (xs ys: list<A>) ->
//   rev<A> (append<A> (rev<A> xs) (rev<A> ys))
//   =< append<A> ys xs

prop prod12 <A> (xs ys: list<A>) ->
  it_rev<A> xs ys == append<A> (rev<A> xs) ys

prop prod13 (n: nat) ->
  half (add n n) =< n
  
// Tested in the zeno set
// prop prod14 (xs: list<nat>) ->
//   is_sorted (insertsort xs)
    
prop prod15 (n: nat) ->
  add n (Suc n) =< Suc (add n n)
  
prop prod16 (n: nat) ->
  even (add n n)
  
// Fails due to lack of deepseq info
// prop prod17 <A> (xs ys: list<A>) ->
//   rev<A> (rev<A> (append<A> xs ys))
//   =< append<A> (rev<A> (rev<A> xs)) 
//                (rev<A> (rev<A> ys))
  
// Another deepseq failure
// prop prod18 <A> (xs ys: list<A>) ->
//   rev<A> (append<A> (rev<A> xs) ys)
//   =< append<A> (rev<A> ys) xs

prop prod19 <A> (xs ys: list<A>) ->
  rev<A> (rev<A> (append<A> xs ys))
  =< append<A> (rev<A> (rev<A> xs)) ys

prop prod20 <A> (xs: list<A>) ->
  even (length<A> (append<A> xs xs))
 
// Fails
// prop prod21 <A> (xs ys: list<A>) ->
//   rotate<A> (length<A> xs) (append<A> xs ys)
//   =< append<A> ys xs

// Fails due to internal deepseq issues
// prop prod22 <A> (xs ys: list<A>) ->
//  even (length<A> (append<A> xs ys))
//  == even (length<A> (append<A> ys xs))
  
// Does not hold in either direction
// prop prod23 <A> (xs ys: list<A>) ->
//   half (length<A> (append<A> xs ys)) 
//   == half (length<A> (append<A> ys xs))

// Fails due to internal deepseq issues
// prop prod24 (n m: nat) ->
//   even (add n m) == even (add m n)

// Fails
// prop prod25 <A> (xs ys: list<A>) ->
//   even (length<A> (append<A> xs ys))
//   == even (add (length<A> ys) (length<A> xs))
  
// Does not hold in either direction
// prop prod26 (n m: nat) ->
//   half (add n m) == half (add m n)

prop prod27 <A> (xs: list<A>) ->
  rev<A> xs == it_rev<A> xs Nil<A>
  
// Fails, but shouldn't, bugfix asap
prop prod28 <A> (xss: list<list<A>>) ->
  revflat<A> xss == it_revflat<A> xss Nil<A>

prop prod29 <A> (xs: list<A>) ->
  rev<A> (it_rev<A> xs Nil<A>) =< xs
  
prop prod30 <A> (xs: list<A>) ->
  rev<A> (append<A> (rev<A> xs) Nil<A>) =< xs
  
prop prod31 <A> (xs: list<A>) ->
  it_rev<A> (it_rev<A> xs Nil<A>) Nil<A> =< xs
 
// Fails
// prop prod32 <A> (xs: list<A>) ->
//   rotate<A> (length<A> xs) xs =< xs

// Fails
// prop prod33 (n: nat) ->
//   fac n == qfac n 1

// Fails, but shouldn't, bugfix asap
prop prod34 (n m: nat) ->
  mul n m == qmul n m 0

// Fails
// prop prod35 (n m: nat) ->
//   exp n m == qexp n m 1
  
prop prod36 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n xs
  in elem n (append<nat> xs ys)
  
prop prod37 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n ys
  in elem n (append<nat> xs ys)
  
prop prod38 (n: nat) (xs ys: list<nat>) ->
  assertBool and (elem n xs) (elem n ys)
  in elem n (append<nat> xs ys)
  
prop prod39 (n m: nat) (xs ys: list<nat>) ->
  assertBool elem n (drop<nat> m xs)
  in elem n xs
  
prop prod40 (xs ys: list<nat>) ->
  assertBool subset xs ys
  in union xs ys =< ys
  
prop prod41 (xs ys: list<nat>) ->
  assertBool subset xs ys
  in intersect xs ys =< xs
  
prop prod42 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n xs
  in elem n (union xs ys)
  
prop prod43 (n: nat) (xs ys: list<nat>) ->
  assertBool elem n ys
  in elem n (union xs ys)
  
prop prod44 (n: nat) (xs ys: list<nat>) ->
  assertBool and (elem n xs) (elem n ys)
  in elem n (intersect xs ys)
  
prop prod45 (n: nat) (xs: list<nat>) ->
  elem n (insert n xs) =< True

prop prod46 (n m: nat) (xs: list<nat>) ->
  assertBool eq n m in 
  elem n (insert m xs) =< True

prop prod47 (n m: nat) (xs: list<nat>) ->
  assertBool not (eq n m)
  in elem n (insert m xs) =< elem n xs
  
prop prod48 (xs: list<nat>) ->
  length<nat> (insertsort xs) =< length<nat> xs
 
prop prod49 (n: nat) (xs: list<nat>) ->
  assertBool elem n (insertsort xs) in
  elem n xs =< True
  
// Does not hold
// prop prod50 (n: nat) (xs: list<nat>) ->
//   count n (insertsort xs) == count n xs

prop coind1 <A, B> (f: A -> B) (x: A) ->
  map<A, B> f (repeat<A> x) == repeat<B> (f x)

prop coind2 <A> (f: A -> A) (x: A) ->
  tail<A> (iterate<A> f x) =< iterate<A> f (f x)
  
prop coind3 <A> (f: A -> A) (x: A) ->
  map<A, A> f (iterate<A> f x)
  == iterate<A> f (f x)
  
prop coind4 <A> (p: A -> bool) (x: A) ->
  filter<A> p (repeat<A> x) =< repeat<A> x
  
prop coind5 <A> (n: nat) (x: A) ->
  drop<A> n (repeat<A> x) == repeat<A> x

prop coind6 <A> (f: A -> A) (x: A) ->
  butlast<A> (iterate<A> f x) == iterate<A> f x
  
prop coind7 <A> (f: A -> A) (x: A) ->
  last<A> (iterate<A> f x) == _|_ A
  
prop coind8 (n: nat) ->
  is_sorted (repeat<nat> n) == _|_ bool
*/
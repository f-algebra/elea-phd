let t1 = fun (a:*) ->
  fix (f: pi (list a) (list a) nat ->list a) (xs:list a) (y:list a) -> 
    match xs with
    | Nil -> fun (z:nat) -> y
    | Cons x xs' -> fun (z:nat) -> Cons a x (f xs' y
    (match z with | 0 -> 0 | Suc z' -> z' end)) end
let t1' = 
  fun (a:*) (xs:list a) (y:list a) -> 
  (fix (f: pi (list a) nat -> list a) (xs:list a) (z:nat) ->
  match xs with
  | Nil -> y
  | Cons x xs' -> match z with
    | 0 -> Cons a x (f xs' 0)
    | Suc z' -> Cons a x (f xs' z') end end) xs
    
let t2 = fix (f: pi nat nat ->nat) (x:nat) (y:nat) ->
  match x with
  | 0 -> y
  | Suc x' -> Suc (f x' y) end    
let t2' = fun (x:nat) (y:nat) ->
  (fix (f:pi nat->nat) (x:nat) ->
    match x with
    | 0 -> y
    | Suc x' -> Suc (f x') end) x

let t3 = 
  fun (a:*) (y:a) (xs:list a) -> app a xs (Cons a y (Nil a))
let t3' = 
  fun (a:*) (y:a) ->
    fix (app: pi (list a)->list a) (xs:list a) ->
    match xs with
    | Nil -> Cons a y (Nil a)
    | Cons x xs' -> Cons a x (app xs') end
  
let t4 = 
  fix (rev: pi (a:*) (list a) -> list a) (a:*) (xs:list a)->
    match xs with
    | Nil -> Nil a
    | Cons x ys -> (app a) (rev a ys) (Cons a x (Nil a))
    end
let t4' = 
  fun (a:*) -> 
    fix (f: pi (list a) -> list a) (xs: list a) ->
    match xs with
    | Nil -> Nil a
    | Cons x ys -> app a (f ys) (Cons a x (Nil a))
    end
    
let t5 = 
  fix (rap: pi (a:*) a (list a) -> list a) (a:*) (y:a) (xs:list a)->
    match xs with
    | Nil -> Cons a y (Nil a)
    | Cons x ys -> (app a) (rap a y ys) (Cons a x (Nil a))
    end
let t5' = 
  fun (a:*) (y:a) -> 
    fix (f: pi (list a) -> list a) (xs: list a) ->
    match xs with
    | Nil -> Cons a y (Nil a)
    | Cons x ys -> app a (f ys) (Cons a x (Nil a))
    end
    
let t6 = fun (a:*) (xs:list a) (n:nat) ->
  match leq_nat (len a xs) n with
  | True -> True
  | False -> 
    match n with
    | 0 -> True
    | Suc n' ->
      match xs with
      | Nil -> False
      | Cons x xs' -> leq_nat n' (len a xs')
      end
    end
  end
let t6' = fun (a:*) (xs:list a) (n:nat) ->
  match n with
  | 0 -> True
  | Suc n' ->
    match xs with
    | Nil -> True
    | Cons x xs' ->
      match leq_nat (len a xs') n' with
      | True -> True
      | False -> leq_nat n' (len a xs')
      end
    end
  end

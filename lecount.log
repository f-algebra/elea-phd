

[fixfix fusing]
(
fix (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) ((
fix (app: list -> list) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> ys
  | Cons (y: nat) (ys: list) -> Cons y (app ys)
  end) xs)


[unfolded]
(
fix (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) (Cons y ((
fix<336> (app: list -> list) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> ys[2]
  | Cons (y: nat) (ys: list) -> Cons y (app ys)
  end) ys))


[yielding]

if $eq n y
then Suc ((
  fix (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ((
  fix<336> (app: list -> list) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> ys[2]
    | Cons (y: nat) (ys: list) -> Cons y (app ys)
    end) ys))
else (
  fix (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ((
  fix<336> (app: list -> list) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> ys[2]
    | Cons (y: nat) (ys: list) -> Cons y (app ys)
    end) ys)


[fixfix yielded]
(
fix (app: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: list -> nat) -> 
      fun (xs: list) -> 
      match xs with
      | Nil -> 0
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then Suc (count ys)
        else count ys
      end) ys
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (app ys)
    else app ys
  end) xs


[fixfix fusing]
$le ((
fix (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) xs) ((
fix (app: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: list -> nat) -> 
      fun (xs: list) -> 
      match xs with
      | Nil -> 0
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then Suc (count ys)
        else count ys
      end) ys
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (app ys)
    else app ys
  end) xs)


[unfolded]
$eq 0 y[2]


[yielding]

match y[2] with
| 0 -> True
| Suc (y': nat) -> False
end


[unfolded]
$eq (Suc x') y[2]


[yielding]

match y[2] with
| 0 -> False
| Suc (y': nat) -> $eq x' y'
end


[unfolded]
$eq 0 y[2]


[yielding]

match y[2] with
| 0 -> True
| Suc (y': nat) -> False
end


[unfolded]
$eq (Suc x') y[2]


[yielding]

match y[2] with
| 0 -> False
| Suc (y': nat) -> $eq x' y'
end


[fixfix fusing]
$le x ((
fix (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) ys)


[unfolded]
$le x 0


[yielding]

match x with
| 0 -> True
| Suc (x': nat) -> False
end


[unfolded]
$le x (Suc ((
fix<340> (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) ys))


[yielding]

match x with
| 0 -> True
| Suc (x': nat) -> $le x' ((
  fix<340> (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ys)
end


[fixfix yielded]
(
fix (count: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match ys with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> count x' ys
      end
    else count x ys
  end) x ys


[unfolded]
$le x (Suc ((
fix<337> (app: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: list -> nat) -> 
      fun (xs: list) -> 
      match xs with
      | Nil -> 0
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then Suc (count ys)
        else count ys
      end) ys[2]
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (app ys)
    else app ys
  end) ys))


[yielding]

match x with
| 0 -> True
| Suc (x': nat) -> $le x' ((
  fix<337> (app: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> (
      fix (count: list -> nat) -> 
        fun (xs: list) -> 
        match xs with
        | Nil -> 0
        | Cons (y: nat) (ys: list) -> 
          if $eq n y
          then Suc (count ys)
          else count ys
        end) ys[2]
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (app ys)
      else app ys
    end) ys)
end


[fixfix fusing]
(
fix (app: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: nat -> list -> bool) -> 
      fun (x: nat) -> 
      fun (ys: list) -> 
      match ys with
      | Nil -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then 
          match x with
          | 0 -> True
          | Suc (x': nat) -> count x' ys
          end
        else count x ys
      end) x ys
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> app x' ys
      end
    else app x ys
  end) ((
fix (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) xs) xs


[unfolded]
$eq 0 y[2]


[yielding]

match y[2] with
| 0 -> True
| Suc (y': nat) -> False
end


[unfolded]
$eq (Suc x') y[2]


[yielding]

match y[2] with
| 0 -> False
| Suc (y': nat) -> $eq x' y'
end


[unfolded]
$eq 0 y[2]


[yielding]

match y[2] with
| 0 -> True
| Suc (y': nat) -> False
end


[unfolded]
$eq (Suc x') y[2]


[yielding]

match y[2] with
| 0 -> False
| Suc (y': nat) -> $eq x' y'
end


[unfolded]
(
fix (app: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: nat -> list -> bool) -> 
      fun (x: nat) -> 
      fun (ys: list) -> 
      match ys with
      | Nil -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then 
          match x with
          | 0 -> True
          | Suc (x': nat) -> count x' ys
          end
        else count x ys
      end) x ys
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> app x' ys
      end
    else app x ys
  end) 0 Nil


[yielding]
(
fix (count: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (ys: list) -> 
  match ys with
  | Nil -> 
    match x with
    | 0 -> True
    | Suc (x': nat) -> False
    end
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> count x' ys
      end
    else count x ys
  end) 0 ys


[orig]
(
fix (count: list -> bool) -> 
  fun (ys: list) -> 
  match ys with
  | Nil -> True
  | Cons (y: nat) (ys: list) -> 
    if (
      fix (eq: nat -> nat -> bool) -> 
        fun (x: nat) -> 
        fun (y: nat) -> 
        match x with
        | 0 -> 
          match y with
          | 0 -> True
          | Suc (y': nat) -> False
          end
        | Suc (x': nat) -> 
          match y with
          | 0 -> False
          | Suc (y': nat) -> eq x' y'
          end
        end) _10 y
    then True
    else count ys
  end) _2


[guess]
True


[guess check]
True


[unfolded]
(
fix<341> (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) Nil


[yielding]
0


[unfolded]
(
fix<341> (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) Nil


[yielding]
0


[unfolded]
(
fix (app: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: nat -> list -> bool) -> 
      fun (x: nat) -> 
      fun (ys: list) -> 
      match ys with
      | Nil -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then 
          match x with
          | 0 -> True
          | Suc (x': nat) -> count x' ys
          end
        else count x ys
      end) x ys[2]
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> app x' ys
      end
    else app x ys
  end) (Suc ((
fix<341> (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) ys)) (Cons y ys)


[yielding]

if $eq n y
then (
  fix (app: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> (
      fix (count: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match ys with
        | Nil -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> False
          end
        | Cons (y: nat) (ys: list) -> 
          if $eq n y
          then 
            match x with
            | 0 -> True
            | Suc (x': nat) -> count x' ys
            end
          else count x ys
        end) x ys[2]
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then 
        match x with
        | 0 -> True
        | Suc (x': nat) -> app x' ys
        end
      else app x ys
    end) ((
  fix<341> (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ys) ys
else (
  fix (app: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> (
      fix (count: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match ys with
        | Nil -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> False
          end
        | Cons (y: nat) (ys: list) -> 
          if $eq n y
          then 
            match x with
            | 0 -> True
            | Suc (x': nat) -> count x' ys
            end
          else count x ys
        end) x ys[2]
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then 
        match x with
        | 0 -> True
        | Suc (x': nat) -> app x' ys
        end
      else app x ys
    end) (Suc ((
  fix<341> (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ys)) ys


[unfolded]
(
fix (app: nat -> list -> bool) -> 
  fun (x: nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> (
    fix (count: nat -> list -> bool) -> 
      fun (x: nat) -> 
      fun (ys: list) -> 
      match ys with
      | Nil -> 
        match x with
        | 0 -> True
        | Suc (x': nat) -> False
        end
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then 
          match x with
          | 0 -> True
          | Suc (x': nat) -> count x' ys
          end
        else count x ys
      end) x ys[2]
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then 
      match x with
      | 0 -> True
      | Suc (x': nat) -> app x' ys
      end
    else app x ys
  end) ((
fix<341> (count: list -> nat) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> 0
  | Cons (y: nat) (ys: list) -> 
    if $eq n y
    then Suc (count ys)
    else count ys
  end) ys) (Cons y ys)


[yielding]

if $eq n y
then 
  match (
  fix<341> (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ys with
  | 0 -> True
  | Suc (x': nat) -> (
    fix (app: nat -> list -> bool) -> 
      fun (x: nat) -> 
      fun (xs: list) -> 
      match xs with
      | Nil -> (
        fix (count: nat -> list -> bool) -> 
          fun (x: nat) -> 
          fun (ys: list) -> 
          match ys with
          | Nil -> 
            match x with
            | 0 -> True
            | Suc (x': nat) -> False
            end
          | Cons (y: nat) (ys: list) -> 
            if $eq n y
            then 
              match x with
              | 0 -> True
              | Suc (x': nat) -> count x' ys
              end
            else count x ys
          end) x ys[2]
      | Cons (y: nat) (ys: list) -> 
        if $eq n y
        then 
          match x with
          | 0 -> True
          | Suc (x': nat) -> app x' ys
          end
        else app x ys
      end) x' ys
  end
else (
  fix (app: nat -> list -> bool) -> 
    fun (x: nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> (
      fix (count: nat -> list -> bool) -> 
        fun (x: nat) -> 
        fun (ys: list) -> 
        match ys with
        | Nil -> 
          match x with
          | 0 -> True
          | Suc (x': nat) -> False
          end
        | Cons (y: nat) (ys: list) -> 
          if $eq n y
          then 
            match x with
            | 0 -> True
            | Suc (x': nat) -> count x' ys
            end
          else count x ys
        end) x ys[2]
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then 
        match x with
        | 0 -> True
        | Suc (x': nat) -> app x' ys
        end
      else app x ys
    end) ((
  fix<341> (count: list -> nat) -> 
    fun (xs: list) -> 
    match xs with
    | Nil -> 0
    | Cons (y: nat) (ys: list) -> 
      if $eq n y
      then Suc (count ys)
      else count ys
    end) ys) ys


[orig]
(
fix (count: list -> bool) -> 
  fun (xs: list) -> 
  match xs with
  | Nil -> True
  | Cons (y: nat) (ys: list) -> 
    if (
      fix (eq: nat -> nat -> bool) -> 
        fun (x: nat) -> 
        fun (y: nat) -> 
        match x with
        | 0 -> 
          match y with
          | 0 -> True
          | Suc (y': nat) -> False
          end
        | Suc (x': nat) -> 
          match y with
          | 0 -> False
          | Suc (y': nat) -> eq x' y'
          end
        end) _6 y
    then count ys
    else count ys
  end) _1


[guess]
True


[guess check]
True


[fixfix yielded]
True


[fixfix yielded]
True
Cases: 1  Tried: 0  Errors: 0  Failures: 0                                          Cases: 1  Tried: 1  Errors: 0  Failures: 0
